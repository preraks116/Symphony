DROP DATABASE IF EXISTS `SYMPHONY`;
CREATE SCHEMA `SYMPHONY`;
USE `SYMPHONY`;
DROP TABLE IF EXISTS `USER`;

CREATE TABLE `USER` (
  `USER_ID` int(11) NOT NULL AUTO_INCREMENT,
  `USER_NAME` char(30) NOT NULL,
  `USER_EMAIL` char(30),
  `USER_PASSWORD` char(20) NOT NULL,
  `USER_REGISTRATION_DATE` date NOT NULL,
  `USER_STATE` CHAR(20),
  `USER_COUNTRY` CHAR(20) NOT NULL,
  `USER_MOBILE_NUMBER` INT(10),
  `USER_IMG` CHAR(20),
  PRIMARY KEY (`USER_ID`),
  KEY(`USER_COUNTRY`),
  KEY(`USER_EMAIL`)
);
-- user sahi hain 1

DROP TABLE IF EXISTS `ARTIST`;

CREATE TABLE `ARTIST` (
  `ARTIST_ID` int(11) NOT NULL AUTO_INCREMENT,
  `ARTIST_NAME` varchar(100) NOT NULL,
  `ARTIST_FOLLOWERS` int(11),
  `ARTIST_CATEGORY` varchar(100) NOT NULL,
  `ARTIST_IMG` varchar(100),
  PRIMARY KEY (`ARTIST_ID`),
  KEY(`ARTIST_NAME`)
);
-- artist sahi hain 2

DROP TABLE IF EXISTS `ALBUM`;
CREATE TABLE `ALBUM` (
  `ALBUM_ID` int(11) NOT NULL AUTO_INCREMENT,
  `ALBUM_NAME` varchar(30) NOT NULL,
  `ALBUM_RELEASE_DATE` DATE,
  `ARTIST_COVER_IMAGE` varchar(100),
  `ARTIST_ID` int(11) NOT NULL,
  PRIMARY KEY (`ALBUM_ID`),
  CONSTRAINT `ALBUM_FK_ARTIST` FOREIGN KEY (`ARTIST_ID`) REFERENCES `ARTIST` (`ARTIST_ID`),
  KEY(`ALBUM_NAME`)
);
-- album sahi hain 3

DROP TABLE IF EXISTS `SONG`;
CREATE TABLE `SONG` (
  `SONG_ID` int(11) NOT NULL AUTO_INCREMENT,
  `SONG_TITLE` varchar(100) NOT NULL,
  `SONG_LENGTH` int(11) NOT NULL,
  `SONG_LYRICS` varchar(1000) NOT NULL,
  `DATE_ADDED` date NOT NULL,
  `SONG_PATH` varchar(50) NOT NULL,
  `ALBUM_ID` int(11) NOT NULL,
  `ARTIST_ID` int(11) NOT NULL,
  PRIMARY KEY (`SONG_ID`),
  CONSTRAINT `SONG_FK_ALBUM` FOREIGN KEY (`ALBUM_ID`) REFERENCES `ALBUM` (`ALBUM_ID`),
  CONSTRAINT `SONG_FK_ARTIST` FOREIGN KEY (`ARTIST_ID`) REFERENCES `ARTIST` (`ARTIST_ID`),
  KEY(`SONG_LYRICS`)
);
-- song sahi hain 4

DROP TABLE IF EXISTS `PLAYLIST`;
CREATE TABLE `PLAYLIST` (
  `USER_ID` int(11) NOT NULL,
  `PLAYLIST_TITLE` char(30) NOT NULL,
  `PLAYLIST_DESCRIPTION` char(30),
  `PLAYLIST_SAVES` INT(11), 
  `IS_SECRET` BOOL,
  PRIMARY KEY (`USER_ID`, `PLAYLIST_TITLE`),
  CONSTRAINT `PLAYLIST_FK_USER` FOREIGN KEY (`USER_ID`) REFERENCES `USER` (`USER_ID`)
);
-- playlist sahi hain 5

DROP TABLE IF EXISTS `PODCAST`;
CREATE TABLE `PODCAST` (
  `PODCAST_ID` int(11) NOT NULL AUTO_INCREMENT,
  `PODCAST_TITLE` varchar(30) NOT NULL,
  `PODCAST_CATEGORY` varchar(30) NOT NULL,
  `PODCAST_NUMBER_OF_EPISODES` int(11) NOT NULL,
  `PODCAST_TOTAL_DURATION` int(11) NOT NULL,
  `PODCAST_COVER_IMG` varchar(50) NOT NULL,
  `ARTIST_ID` int(11) NOT NULL, 
  PRIMARY KEY (`PODCAST_ID`),
  CONSTRAINT `PODCAST_FK_ARTIST` FOREIGN KEY (`ARTIST_ID`) REFERENCES `ARTIST` (`ARTIST_ID`)
);
-- podcast sahi hain 6

DROP TABLE IF EXISTS `EPISODE`;
CREATE TABLE `EPISODE` (
  `PODCAST_ID` int(11) NOT NULL ,
  `EPISODE_TITLE` varchar(30) NOT NULL,
  `EPISODE_NUMBER` INT(3),
  `EPISODE_DURATION` INT(6),
  `EPISODE_RELEASE_DATE` DATE,
  `EPISODE_DESCRIPTION` varchar(50),
  PRIMARY KEY (`PODCAST_ID`),
  CONSTRAINT `EPISODE_FK_PODCAST` FOREIGN KEY (`PODCAST_ID`) REFERENCES `PODCAST` (`PODCAST_ID`)
);
-- episode sahi hain 7

DROP TABLE IF EXISTS `PLAN`;
CREATE TABLE `PLAN` (
  `PLAN_ID` int(11) NOT NULL AUTO_INCREMENT,
  `PLAN_NAME` varchar(30) NOT NULL,
  `PLAN_COST` INT(11),
  PRIMARY KEY (`PLAN_ID`)
);
-- plan sahi hain 8

DROP TABLE IF EXISTS `SAVES`;
CREATE TABLE `SAVES` (
  `USER_ID` int(11) NOT NULL,
  `PLAYLIST_TITLE` char(30) NOT NULL,
  PRIMARY KEY (`USER_ID`, `PLAYLIST_TITLE`)
);
-- saves sahi hain 9

DROP TABLE IF EXISTS `NORMAL_USERS`;
CREATE TABLE `NORMAL_USERS` (
  `USER_ID` int(11) NOT NULL,
  PRIMARY KEY (`USER_ID`),
  CONSTRAINT `NUSERS_FK_USER` FOREIGN KEY (`USER_ID`) REFERENCES `USER` (`USER_ID`)
);
-- normal user sahi hain 10

DROP TABLE IF EXISTS `PREMIUM_USERS`;
CREATE TABLE `PREMIUM_USERS` (
  `USER_ID` int(11) NOT NULL,
  `PLAN_ID` int(11) NOT NULL,
  PRIMARY KEY (`USER_ID`),
  CONSTRAINT `PUSERS_FK_USER` FOREIGN KEY (`USER_ID`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `PUSERS_FK_PLAN` FOREIGN KEY (`PLAN_ID`) REFERENCES `PLAN` (`PLAN_ID`)
);
-- premium user sahi hain 11
  --CONSTRAINT `PUSERS_FK_PLAN` FOREIGN KEY (`PLAN_ID`) REFERENCES `PLAN` (`PLAN_ID`)

DROP TABLE IF EXISTS `STATE_TO_COUNTRY`;
CREATE TABLE `STATE_TO_COUNTRY` (
  `STATE` varchar(30) NOT NULL,
  `COUNTRY` varchar(30) NOT NULL,
  PRIMARY KEY (`STATE`)
);
-- state to country sahi hain 12

DROP TABLE IF EXISTS `LIKES`;
CREATE TABLE `LIKES` (
  `USER_ID` int(11) NOT NULL,
  `SONG_ID` int(11) NOT NULL,
  PRIMARY KEY (`USER_ID`, `SONG_ID`),
  CONSTRAINT `LIKES_FK_USER` FOREIGN KEY (`USER_ID`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `LIKES_FK_SONG` FOREIGN KEY (`SONG_ID`) REFERENCES `SONG` (`SONG_ID`)
);
-- likes sahi hain 13

DROP TABLE IF EXISTS `SONG_GENRE`;
CREATE TABLE `SONG_GENRE` (
  `SONG_ID` int(11) NOT NULL,
  `GENRE` varchar(30) NOT NULL,
  PRIMARY KEY (`SONG_ID`, `GENRE`),
  CONSTRAINT `SONG_GENRE_FK_SONG` FOREIGN KEY (`SONG_ID`) REFERENCES `SONG` (`SONG_ID`)
);
-- song genre sahi hain 14

DROP TABLE IF EXISTS `SONG_LYRICS_TO_IS_EXPLICIT`;
CREATE TABLE `SONG_LYRICS_TO_IS_EXPLICIT` (
  `SONG_LYRICS` varchar(1000) NOT NULL,
  `IS_EXPLICIT` BOOL NOT NULL,
  PRIMARY KEY (`SONG_LYRICS`),
  CONSTRAINT `SONG_LYRICS_TO_IS_EXPLICIT_FK_SONG` FOREIGN KEY (`SONG_LYRICS`) REFERENCES `SONG` (`SONG_LYRICS`)
);
-- song lyrics to is explicit sahi hain 15

DROP TABLE IF EXISTS `PODCAST_LANGUAGE`;
CREATE TABLE `PODCAST_LANGUAGE` (
  `PODCAST_ID` int(11) NOT NULL,
  `LANGUAGE` varchar(30) NOT NULL,
  PRIMARY KEY (`LANGUAGE`),
  CONSTRAINT `PODCAST_LANGUAGE_FK_PODCAST` FOREIGN KEY (`PODCAST_ID`) REFERENCES `PODCAST` (`PODCAST_ID`)
);

-- podcast language sahi hain 16

DROP TABLE IF EXISTS `COUNTRY_TO_COUNTRY_CODE`;
CREATE TABLE `COUNTRY_TO_COUNTRY_CODE` (
  `COUNTRY_CODE` int(3) NOT NULL,
  `USER_COUNTRY` char(20) NOT NULL,
  PRIMARY KEY (`USER_COUNTRY`, `COUNTRY_CODE`),
  CONSTRAINT `COUNTRY_TO_COUNTRY_CODE_FK_USER` FOREIGN KEY (`USER_COUNTRY`) REFERENCES `USER` (`USER_COUNTRY`)
);
-- country to country code sahi hain 17

DROP TABLE IF EXISTS `FOLLOWS`;
CREATE TABLE `FOLLOWS` (
  `USER_ID` int(11) NOT NULL,
  `ARTIST_ID` int(11) NOT NULL,
  PRIMARY KEY (`USER_ID`, `ARTIST_ID`),
  CONSTRAINT `FOLLOWS_FK_USER` FOREIGN KEY (`USER_ID`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FOLLOWS_FK_ARTIST` FOREIGN KEY (`ARTIST_ID`) REFERENCES `ARTIST` (`ARTIST_ID`)
);
-- follows sahi hain 18

DROP TABLE IF EXISTS `HAS/FROM/BY`;
CREATE TABLE `HAS/FROM/BY` (
  `USER_ID` int(11) NOT NULL,
  `SONG_ID` INT(11) NOT NULL,
  `ALBUM_ID` INT(11) NOT NULL,
 `PLAYLIST_TITLE` char(30) NOT NULL,
  PRIMARY KEY (`PLAYLIST_TITLE`, `USER_ID`,`SONG_ID`),
  CONSTRAINT `HAS/FROM/BY_FK_USER` FOREIGN KEY (`USER_ID`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `HAS/FROM/BY_FK_SONG` FOREIGN KEY (`SONG_ID`) REFERENCES `SONG` (`SONG_ID`)
);

-- has/from/by sahi hain 19